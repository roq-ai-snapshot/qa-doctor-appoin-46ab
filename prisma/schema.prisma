generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointment_date DateTime @db.Date
  appointment_time DateTime @db.Time(6)
  status           String   @db.VarChar(255)
  doctor_id        String   @db.Uuid
  user_id          String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  doctor           doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model appointment_slot {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time  DateTime @db.Time(6)
  end_time    DateTime @db.Time(6)
  day_of_week Int
  doctor_id   String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  doctor      doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model doctor {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name       String             @db.VarChar(255)
  last_name        String             @db.VarChar(255)
  specialization   String             @db.VarChar(255)
  experience_years Int
  organization_id  String             @db.Uuid
  user_id          String             @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  appointment      appointment[]
  appointment_slot appointment_slot[]
  organization     organization       @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String   @db.VarChar(255)
  last_name    String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  phone_number String   @db.VarChar(255)
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  doctor      doctor[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  appointment  appointment[]
  doctor       doctor[]
  guest        guest[]
  organization organization[]
}
